'use client';

import { useState } from 'react';
import { generateImageWithImagen4 } from '@/actions/imagen4-actions';

const ASPECT_RATIOS = [
  { value: '1:1', label: '1:1 (Square)' },
  { value: '9:16', label: '9:16 (Mobile Portrait)' },
  { value: '16:9', label: '16:9 (Widescreen)' },
  { value: '3:4', label: '3:4' },
  { value: '4:3', label: '4:3' },
];

export function Imagen4Generator({ className = '' }: { className?: string }) {
  const [prompt, setPrompt] = useState('');
  const [aspectRatio, setAspectRatio] = useState('9:16');
  const [isGenerating, setIsGenerating] = useState(false);
  const [generatedImage, setGeneratedImage] = useState<string | null>(null);
  const [error, setError] = useState<string | null>(null);
  const [usedPrompt, setUsedPrompt] = useState<string | null>(null);

  const handleGenerate = async () => {
    if (!prompt.trim()) {
      setError('Please enter a prompt');
      return;
    }
    setIsGenerating(true);
    setError(null);
    setGeneratedImage(null);
    try {
      const result = await generateImageWithImagen4(prompt, aspectRatio);
      if (result.success && result.imageUrl) {
        setGeneratedImage(result.imageUrl);
        setUsedPrompt(result.prompt || prompt);
      } else {
        setError(result.error || 'Failed to generate image');
      }
    } catch (err) {
      setError('An unexpected error occurred');
    } finally {
      setIsGenerating(false);
    }
  };

  const handleDownload = () => {
    if (!generatedImage) return;
    const link = document.createElement('a');
    link.href = generatedImage;
    link.download = `imagen4-wallpaper-${Date.now()}.png`;
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);
  };

  return (
    <div className={`bg-white rounded-lg shadow-lg p-6 ${className}`}>
      <div className="text-center mb-6">
        <h2 className="text-2xl font-bold text-gray-900 mb-2">üñºÔ∏è Imagen-4 Generator</h2>
        <p className="text-gray-600">Generate beautiful images using Google Imagen-4 on Replicate</p>
      </div>
      <div className="mb-6">
        <label htmlFor="prompt" className="block text-sm font-medium text-gray-700 mb-2">
          Describe your image
        </label>
        <textarea
          id="prompt"
          value={prompt}
          onChange={(e) => setPrompt(e.target.value)}
          placeholder="e.g., A futuristic cityscape at sunset, vibrant colors, ultra-detailed"
          className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent"
          rows={3}
        />
      </div>
      <div className="mb-6">
        <label htmlFor="aspect-ratio" className="block text-sm font-medium text-gray-700 mb-2">
          Aspect Ratio
        </label>
        <select
          id="aspect-ratio"
          value={aspectRatio}
          onChange={(e) => setAspectRatio(e.target.value)}
          className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent"
        >
          {ASPECT_RATIOS.map((ar) => (
            <option key={ar.value} value={ar.value}>{ar.label}</option>
          ))}
        </select>
      </div>
      <div className="flex gap-3 mb-6">
        <button
          onClick={handleGenerate}
          disabled={isGenerating || !prompt.trim()}
          className="flex-1 bg-blue-600 text-white px-4 py-2 rounded-md hover:bg-blue-700 disabled:opacity-50 disabled:cursor-not-allowed transition-colors"
        >
          {isGenerating ? 'Generating...' : 'Generate Image'}
        </button>
      </div>
      {error && (
        <div className="mb-4 p-3 bg-red-100 border border-red-400 text-red-700 rounded-md">
          {error}
        </div>
      )}
      {generatedImage && (
        <div className="space-y-4">
          <div className="text-center">
            <h3 className="text-lg font-semibold text-gray-900 mb-2">Generated Image</h3>
            {usedPrompt && (
              <p className="text-sm text-gray-600 mb-3">
                <strong>Prompt:</strong> {usedPrompt}
              </p>
            )}
          </div>
          <div className="relative">
            <img
              src={generatedImage}
              alt="Generated by Imagen-4"
              className="w-full max-w-md mx-auto rounded-lg shadow-md"
            />
          </div>
          <div className="text-center">
            <button
              onClick={handleDownload}
              className="bg-purple-600 text-white px-6 py-2 rounded-md hover:bg-purple-700 transition-colors"
            >
              üì• Download Image
            </button>
          </div>
        </div>
      )}
      {isGenerating && (
        <div className="text-center py-8">
          <div className="inline-block animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600"></div>
          <p className="mt-2 text-gray-600">Generating your image...</p>
        </div>
      )}
    </div>
  );
} 